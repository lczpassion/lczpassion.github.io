<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[随潮而动,随势而行]]></title>
  <subtitle><![CDATA[心有猛虎,细嗅蔷薇]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http:lczpassion.com/"/>
  <updated>2015-12-02T14:40:59.000Z</updated>
  <id>http:lczpassion.com/</id>
  
  <author>
    <name><![CDATA[济沧海]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[不对劲]]></title>
    <link href="http:lczpassion.com/2015/12/02/%E4%B8%8D%E5%AF%B9%E5%8A%B2/"/>
    <id>http:lczpassion.com/2015/12/02/不对劲/</id>
    <published>2015-12-02T14:01:06.000Z</published>
    <updated>2015-12-02T14:40:59.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>在当今社会，如果你想让人承认或认可你，没点实实在在的东西是不可能的。</p>
</blockquote>
<p>这句话乍一看一点问题没有，这简直就是现在社会的规则了。　但我感觉总有点不对劲。</p>
<p>你现在在微博上看看，是个V都有头衔，不管是演员，作家还是模特。没头衔没人认可你。</p>
<p>就算你是学生，还得分985 211呢。</p>
<p>所以可以理解为什么现在人们追求金钱啊，追求地位啊，当然我也不例外，我也追求这些，现在没这些东西你出去都没人搭理你。</p>
<p>但我还是感觉不对劲，但我明说我现在对这个问题无解，先别骂我，如果你不幸看到我这篇扯淡的文章，如果你有解，请告诉我，谢谢。</p>
<p>其实我现在写这个文章主要是为了做一下标记，如果以后我哪天明白了，我可以回来把题目改成　“有解”　。</p>
<p>你可能会说当你自己内心强大了，就不在乎那些外物了。</p>
<p>但我现在就是一俗人，我想一个社会人很难不在乎别人的看法吧，我可以不在乎一些东西，但要完全不在乎，对现在的我不可能。</p>
<p>说句不敬的话，就连那些高僧，后面还要加个“大师”呢。</p>
<p>有可能是我想多了，是我偏执了，一个伟人如果死了，后人为了纪念他，只能把他做的事记下来。然后追加个头衔。</p>
<p>而我现在能做的只有努力的去追求金钱地位，而尽量的在这个过程中获得乐趣，这种按<code>规则</code>去做事的感觉并不美好。</p>
<p>当我毕业了可能就现实的不去想这些问题了。</p>
<p>世人皆俗　自己如何能保持不俗？　只有圣人能做到了吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>在当今社会，如果你想让人承认或认可你，没点实实在在的东西是不可能的。</p>
</blockquote>
<p>这句话乍一看一点问题没有，这简直就是现在社会的规则了。　但我感觉总有点不对劲。</p>
<p>你现在在微博上看看，是个V都有头衔，不管是]]>
    </summary>
    
      <category term="杂谈" scheme="http:lczpassion.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[穷爸爸与富爸爸读后总结]]></title>
    <link href="http:lczpassion.com/2015/10/27/%E7%A9%B7%E7%88%B8%E7%88%B8%E4%B8%8E%E5%AF%8C%E7%88%B8%E7%88%B8%E8%AF%BB%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    <id>http:lczpassion.com/2015/10/27/穷爸爸与富爸爸读后总结/</id>
    <published>2015-10-27T10:20:36.000Z</published>
    <updated>2015-10-28T13:20:45.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>　前几天闲来无事翻知乎的高票答案（真有干货），发现有人推荐《穷爸爸与富爸爸》这本书，这本书眼熟了很久，就下了个pdf版本的读了一遍，发现真心不错，以后会买本实体书收藏的，现在再精读一遍并做下总结。</p>
</blockquote>
<p>首先作者罗伯特·T·清崎先讲了他有两个爸爸，一个爸爸是博士，两年读完本科，又在斯坦福芝加哥西北大学深造，另一个爸爸连八年级没读完。（这其实不重要，可能是作者为了吸引眼球杜撰的）然而博士爸爸穷，低学历爸爸富。然后整本书就是比较这两个爸爸思维的区别。从作者的这本书的名字和开头，可以看出作者确实是个厉害的畅销书作家，会吸引眼球，会赚钱。而事实上这本书确实为他赚了大量的金钱。</p>
<hr>
<h2 id="我个人认为读这本书最重要的是学习里面的思维，自己感觉受益良多，下面列出自认为有用的话。">我个人认为读这本书最重要的是学习里面的思维，自己感觉受益良多，下面列出自认为有用的话。</h2><p>１．我逐渐意识到富人之所以越来越富,穷人之所以越来越穷,中产阶级之所以总是在债务泥潭中挣扎,其主要原因之一在于他们对金钱的观念不是来自学校,而是来自家庭。我们中的绝大多数人是从父母那里了解钱是怎么回事的。一对贫困的父母在培养孩子的理财观念时,只会说:“在学校里要好好学习喔”。结果,他们的孩子可能会以优异的成绩毕业,但同时也秉承了贫穷父母的理财方式和思维观念。</p>
<hr>
<p>２．穷人和中产阶级为钱而工作,富人让钱为他们工作。</p>
<hr>
<p>３．我知道我会一辈子去研究钱这东西,因为我研究得越深,知道的东西也就越多。大多数人从不研究这个题目,他们去上班,挣工资,然后去开销,总也不明白为何老被钱所困扰,于是以为多点钱就能解决问题,却几乎没有人意识到缺乏财务知识才是他们真正的问题所在。”</p>
<hr>
<h3 id="你有热情学习吗?">你有热情学习吗?</h3><p>４．他们不去分辨真相,不去思考,只是对感受作出反应。他们感到恐惧,于是去工作,希望钱能消除恐惧,但钱不可能消除恐惧。于是,恐惧追逐着他们,他们只好又去工作,希望钱能消除恐惧,但还是无法摆脱恐惧。恐惧使他们落入工作的陷阶,挣钱——工作——挣钱,希望有一天能消除恐惧。钱主宰着他们的生活。</p>
<hr>
<h3 id="这就是我想教你们的,而不只是发财,发财并不能解决问题。">这就是我想教你们的,而不只是发财,发财并不能解决问题。</h3><p>５．人们总为了实现欲望而最终变成是为钱工作。他们认为钱能买来快乐,可用钱买来的快乐往往是短暂的,所以他们不久就需要更多的钱来买更多的快乐、更多的开心、更多的舒适和更多的安全。</p>
<hr>
<h3 id="闭口不谈钱就像依赖钱一样是一种心理疾病。">闭口不谈钱就像依赖钱一样是一种心理疾病。</h3><p>6.“我遇到过很多人,他们说‘我对钱没兴趣’,可他们却一天工作 8 小时并不停地抱怨工作无聊。如果他们对钱没兴趣,又何必干自己不喜欢的工作呢?这种人比敛财的人病得更重。”</p>
<hr>
<h3 id="“我想教你们学会支配钱,而不是害怕它,这在学校里是学不到的。如果你不学,你就会变成钱的奴隶。”我对教你们如何挣大把的钱没有兴趣,那解决不了问题。如果你们不先控制恐惧和欲望,即使你们有钱,也只不过是高薪的奴隶而已。“">“我想教你们学会支配钱,而不是害怕它,这在学校里是学不到的。如果你不学,你就会变成钱的奴隶。”我对教你们如何挣大把的钱没有兴趣,那解决不了问题。如果你们不先控制恐惧和欲望,即使你们有钱,也只不过是高薪的奴隶而已。“</h3><p>7.远别忘记,会有两种感情——恐惧和欲望,使你落入一生中最大的陷讲,如果你让它们来控制自己的思想,你的一生就会生活在恐惧中,从不探求你的梦想,这是残酷的。为钱工作,以为钱能买来快乐,这也是残酷的。半夜醒来想着许多的账单要付是一种可怕的生活方式,以工资的高低来安排生活不是真正的生活。这些都很残酷,而我希望你们能避开这些陷饼,如果可能的话,别让这些问题在你们身上发生,别让钱支配你们的生活。”</p>
<hr>
<p>8.“学会让感情跟随你的思想,而不要让思想跟着你的感情。</p>
<hr>
<p>9.我想太多的人仍然过多地关注钱,而不是他们最大的财富——所受的教育。如果人们灵活一些,保持开放的头脑并不断学习,他们将在这些变化中一天比一天富有。如果认为钱<br>能解决一切问题,恐怕这些人的日子就会不太好过。知识才能解决问题并创造财富,不是凭财务知识挣来的钱很快就会消失。</p>
<hr>
<p>10.“富人获得资产,而穷人和中产阶级获得债务,只不过他们以为那些就是资产”。</p>
<hr>
<p>11.<code>资产</code>就是能把钱放进你口袋里的东西”<br>   <code>负债</code>是把钱从你口袋里取走的东西。</p>
<hr>
<p>12.日本人最重视镜子的力量”的原因,因为只有当他们看镜子时,才能发现真相,即大多数人谈“稳定”的原因是出于恐惧。大多数人的财务困境是由于随大溜,简单地跟从其他人所造成的。因此我们都需要不时地照照镜子,去相信我们内在的智慧而不仅只是恐惧。</p>
<hr>
<p>13.中产阶级发现自己总是在财务问题上挣扎,原因何在呢?中产阶级的主要收入是工资,而当工资增加的时候,税收也就增加了,更重要的是他们的支出倾向也随着收入的增加而同等增加。</p>
<hr>
<p>14.财富就是支持一个人生存多长时间的能力,或者说如果我今天停止工作,我还能活多久?</p>
<hr>
<p>15.富人买入资产;<br>   穷人只有支出;<br>   中产阶级买他们以为是资产的负债。</p>
<hr>
<p>16.“关注自己的事业。”存在财务问题的人经常是一生为别人工作的人,许多人在他们停止工作时就变得一无所有。</p>
<hr>
<p>17.变成你所学专业的人员的可怕后果在于太多的人因此而忘了去关注自己的事业,他们耗费一生去关注别人的事业并使他人致富。</p>
<hr>
<p>18.真正的资产可以分为下列几类:<br>   1.不需我到场就可以正常运作的业务。我拥有它们,但由别人经营和管理。如果<br>     我必须在那儿工作,那它就不是我的事业而是我的职业了;<br>   2.股票;<br>   3.债券;<br>   4.共同基金;<br>   5.产生收入的房地产;<br>   6.票据(借据);<br>   7.专利权如音乐、手稿、专利;<br>   8.任何其他有价值、可产生收入或可能增值并且有很好的流通市场的东西。</p>
<hr>
<p>19.十家新公司有九家会在 5 年内倒闭,那些在头五年存活下来的公司又会有十分之九最终倒闭。所以只有当你的确愿意拥有自己的公司时,你再去做我建议的<br>事。否则,继续上班的同时关注自己的事业吧。当我说关注自己的事业时,我的意恩是建立自己强大的资产。</p>
<hr>
<p>20.而初衷是惩罚有钱人的税收,在现实中却惩罚了对它投赞同票的中产阶级和穷人。</p>
<hr>
<p>21.让钱为我工作而不是我为钱工作,这是真正的力量。如果你为钱工作,你就把力量给了雇主;如果钱为你工作,你就能控制这种力量。</p>
<hr>
<p>22.财商是由四个方面的专门知识所构成的:<br>   第一是会计,也就是我说的财务知识。如果你想建立一个自己的帝国的话,财务知识是非常重要的技<br>   能。你管理的钱越多,就越需要精确,否则这大厦就会倒下来。这是左脑要处理的,或者说是细节。财务知识能帮助你读懂财务报表,借助这种能力你还能够辨别业务的<br>   优势和弱势。<br>   第二是投资,我称为钱生钱的科学。投资涉及到策略和方案,这是右脑要做的<br>   事,或者说是创造。<br>   第三是了解市场,它是供给与需求的科学。这要求了解受感情驱动的市场的“技术面”。<br>   第四是法律。它可以帮助你有效运营一个进入会计、投资和市场   领域的企业并实现爆炸性地增长。了解税收优惠政策和公司法律的人能比雇员和小业主更快致富。这就像一个人在走,而另一个人却在飞,若从长远看这种差距就更大了。</p>
<hr>
<p>23.我们惟一的、最重要的资产是我们的头脑。</p>
<hr>
<p>24.我不断地学习和提高的原因是因为我知道市场会有景气和萧条的交替,我意识到变化正在来临,我更欢迎变化而不是沉溺于过去。我之所以想不断地提高自己的财商,是因为每当市场发生变化时,一些人会乞求一份工作,与此同时,另一些人会抓住生活给予他们的机会——我们每个人都会偶尔获得的机会,然后将机会转变成数以百万计的美元。这就是财商。</p>
<hr>
<p>25.好机会是用你的脑子而不是用你的眼睛看到的。大部分人没办法致富仅仅是因为他们没有在财务上受到训练,因而不能认识到机会其实就在他们面前。</p>
<hr>
<p>26.风险总是无处不在,要学会驾驭风险,而不是一味回避风险。</p>
<hr>
<p>27.最重要的专门技能是销售和懂得市场营销。</p>
<hr>
<p>28.如果一定要让我看到一个失败者,就让我看到一个快乐的失败者</p>
<hr>
<p>29.失败会激励胜利者,也会去垮失败者,这是胜者之所以胜利的最大秘密,也是失败者所不知道的秘密。</p>
<hr>
<p>30.如果你知道自己在某一问题上欠缺知识,不要试图掩饰,因为那是在欺骗你自己,你应该做的是去找一位这一领域的专家或者找一本有关这一问题的书,马上开始教育自己。</p>
<hr>
<p>31.时间,这是你最珍贵的资产;学习,因为你没有钱,你更要去学习。事实上我们每天都应该进行一个选择:即选择如何利用自己的时间、自己的金钱以及我们头脑里所学到的东西去实现我们的目标,这就是选择的力量。我们都有机会,我选择要做一个富人,我每天都在为我的选择而努力。</p>
<hr>
<p>32.是否缺乏自律是将富人、穷人和中产阶级区分开来的首要因素。</p>
<hr>
<p>33.首先支付给自己,首先去满足我个人资产项下的需求。</p>
<hr>
<p>34.先予后取。</p>
<hr>
<h1 id="感悟">感悟</h1><p>我时常会想，这辈子我到底追求的是什么？也不知道是幸运还是不幸，我最终发现我的目标也可以称之为理想的东西，就是赚好多好多钱，实现财务自由。它从高中就一直没变过，竟是如此的庸俗，逼格一点都不高ｏ（╯□╰）ｏ。那怎么去实现呢？</p>
<hr>
<p>以当前物价水平，要实现财务自由资产差不多得<code>5000</code>万，而在国内打工税后能到100万的都是行业精英，不吃不喝都得干上50年，这条路实现财务自由太难，放弃。创业倒是能实现财务自由，但10个公司９个死，而且我一直认为创业是一个水到渠成的事，为了钱去创业想不死都难，暂时放弃。其实这本书反复强调了<code>学习</code>的重要性，种瓜得瓜种豆得豆，你学习什么样的知识你就收获什么样的结果，你学习英语你可能就可以和老外对话，你学习编程就能做出产品，那么为了赚钱就得学习理财。</p>
<hr>
<p>这个世界百分之80的财富有百分之20的人占有，而且看起来阶级固化越来越严重，但总有人能打破，不是吗，这为什么不能是我？如果定于40岁前实现财务自由，那么至少有两次大的国家投资趋势，３次大的股市波动，这些都是机会，就看能不能把握住了。你越去学习，你就会发现知识真是学不完的，心理学、经济学、营销学、投资学等等，每一个都浩如烟海，大学只是蜕变的一个起点，要想往上爬我们必须不断的学习，这也是作者和各行各业大牛们反复说的。编程还是要学的，这是一个可成长性工作，得有一技傍身啊。</p>
<h3 id="道里都在这里了，执行就好。">道里都在这里了，执行就好。</h3><h1 id="长风破浪会有时，直挂云帆济沧海。">长风破浪会有时，直挂云帆济沧海。</h1>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>　前几天闲来无事翻知乎的高票答案（真有干货），发现有人推荐《穷爸爸与富爸爸》这本书，这本书眼熟了很久，就下了个pdf版本的读了一遍，发现真心不错，以后会买本实体书收藏的，现在再精读一遍并做下总结。</p>
</blockquote>
<p>首先作者]]>
    </summary>
    
      <category term="读书" scheme="http:lczpassion.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python textwrap模块]]></title>
    <link href="http:lczpassion.com/2015/06/01/Python-textwrap%E6%A8%A1%E5%9D%97/"/>
    <id>http:lczpassion.com/2015/06/01/Python-textwrap模块/</id>
    <published>2015-06-01T12:47:19.000Z</published>
    <updated>2015-06-02T11:39:53.000Z</updated>
    <content type="html"><![CDATA[<p><code>textwrap</code>对字符串的打印还是比较有用的，比如你有以下一个长字符串:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"No mattert what terrible things happen to you today，\</span><br><span class="line">you should'n feel sorrowful.\</span><br><span class="line">It is because that today is the youngest you'll ever be for the rest of your life."</span></span><br></pre></td></tr></table></figure></p>
<p>函数<code>textwrap.fill(text, width=70, **kwargs)</code>，例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line">print(textwrap.fill(s, <span class="number">55</span>))</span><br><span class="line"><span class="comment">#No mattert what terrible things happen to you today，you</span></span><br><span class="line"><span class="comment">#should'n feel sorrowful.It is because that today is the</span></span><br><span class="line"><span class="comment">#youngest you'll ever be for the rest of your life.</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line">print(textwrap.fill(s))</span><br><span class="line"><span class="comment">#No mattert what terrible things happen to you today，you should'n feel</span></span><br><span class="line"><span class="comment">#sorrowful.It is because that today is the youngest you'll ever be for</span></span><br><span class="line"><span class="comment">#the rest of your life.</span></span><br></pre></td></tr></table></figure>
<p>函数<code>initial_indent</code> , 例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line">print(textwrap.fill(s, <span class="number">55</span>, initial_indent=<span class="string">'       '</span>))</span><br><span class="line"><span class="comment">#       No mattert what terrible things happen to you</span></span><br><span class="line"><span class="comment">#today，you should'n feel sorrowful.It is because that</span></span><br><span class="line"><span class="comment">#today is the youngest you'll ever be for the rest of</span></span><br><span class="line"><span class="comment">#your life.</span></span><br></pre></td></tr></table></figure></p>
<p>函数<code>subsequent_indent</code> ,例子:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line">print(textwrap.fill(s, <span class="number">55</span>, subsequent_indent=<span class="string">'    	'</span>))</span><br><span class="line"><span class="comment">#No mattert what terrible things happen to you today，you</span></span><br><span class="line"><span class="comment">#    	should'n feel sorrowful.It is because that today</span></span><br><span class="line"><span class="comment">#    	is the youngest you'll ever be for the rest of</span></span><br><span class="line"><span class="comment">#    	your life.</span></span><br></pre></td></tr></table></figure>
<p>函数<code>textwrap.shorten(text, width, **kwargs)</code>,New in version 3.4,例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line">print(textwrap.shorten(s,width = <span class="number">100</span>))</span><br><span class="line"><span class="comment">#No mattert what terrible things happen to you today，you should'n feel sorrowful.It is because [...]</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line">print(textwrap.shorten(s,width = <span class="number">70</span>,placeholder=<span class="string">"===="</span>))</span><br><span class="line"><span class="comment">#No mattert what terrible things happen to you today，you should'n====</span></span><br></pre></td></tr></table></figure>
<p>函数<code>textwrap.indent(text, prefix, predicate=None)</code>,默认的，prefix加到所有行的前面，但是不包括单独的空格和任何行的结尾，例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"No mattert what terrible things happen to you today，\</span><br><span class="line">you should'n feel sorrowful.\</span><br><span class="line">It is because that today is the youngest you'll ever be for the rest of your life."</span></span><br><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line">print(textwrap.indent(s,<span class="string">'	'</span>))</span><br><span class="line"><span class="comment">#	No mattert what terrible things happen to you today，you should'n feel sorrowful.It is </span></span><br><span class="line"><span class="comment">#	because that today is the youngest you'll ever be for the rest of your life.</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"No mattert what terrible things happen to you today，\</span><br><span class="line">	you should'n feel sorrowful.\</span><br><span class="line">It is because that today is the youngest you'll ever be for the rest of your life."</span></span><br><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line">print(textwrap.indent(s,<span class="string">''</span>))</span><br><span class="line"><span class="comment">#No mattert what terrible things happen to you today，	you should'n feel sorrowful.It is because that today is the youngest you'll ever be for the rest of your life.</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"No mattert what terrible things happen \nto you today，\</span><br><span class="line">you should'n feel sorrowful\</span><br><span class="line">It is because that today is the youngest \nyou'll ever be for the rest of your life."</span></span><br><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line">print(textwrap.indent(s,<span class="string">'+'</span>,<span class="keyword">lambda</span> line: <span class="keyword">True</span>))</span><br><span class="line"><span class="comment">#+No mattert what terrible things happen </span></span><br><span class="line"><span class="comment">#+to you today，you should'n feel sorrowfulIt is because that today is the youngest </span></span><br><span class="line"><span class="comment">#+you'll ever be for the rest of your life.</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>textwrap</code>对字符串的打印还是比较有用的，比如你有以下一个长字符串:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="lin]]>
    </summary>
    
      <category term="Python" scheme="http:lczpassion.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python operator模块]]></title>
    <link href="http:lczpassion.com/2015/05/26/Python-operator/"/>
    <id>http:lczpassion.com/2015/05/26/Python-operator/</id>
    <published>2015-05-26T12:38:55.000Z</published>
    <updated>2015-05-27T10:46:55.000Z</updated>
    <content type="html"><![CDATA[<p>1.<code>operator.attrgetter(*attrs)</code>:从操作对象取出<code>attr</code>并返回一个可调用的对象。如果超过一个attr,返回一个attributes的元组。这个attribute的名字可以包含圆点。例子:</p>
<blockquote>
<ul>
<li>After f = attrgetter(‘name’), the call f(b) returns b.name.</li>
<li>After f = attrgetter(‘name’, ‘date’), the call f(b) returns (b.name, b.date).</li>
<li>After f = attrgetter(‘name.first’, ‘name.last’), the call f(b) returns (b.name.first, b.name.last).<br>等于:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attrgetter</span><span class="params">(*items)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> any(<span class="keyword">not</span> isinstance(item, str) <span class="keyword">for</span> item <span class="keyword">in</span> items):</span><br><span class="line">		<span class="keyword">raise</span> TypeError(<span class="string">'attribute name must be a string'</span>)</span><br><span class="line">	<span class="keyword">if</span> len(items) == <span class="number">1</span>:</span><br><span class="line">		attr = items[<span class="number">0</span>]</span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(obj)</span>:</span></span><br><span class="line">			<span class="keyword">return</span> resolve_attr(obj, attr)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(obj)</span>:</span></span><br><span class="line">			<span class="keyword">return</span> tuple(resolve_attr(obj, attr) <span class="keyword">for</span> attr <span class="keyword">in</span> items)</span><br><span class="line">	<span class="keyword">return</span> g</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resolve_attr</span><span class="params">(obj,attr)</span>:</span></span><br><span class="line">	<span class="keyword">for</span> name <span class="keyword">in</span> attr.split(<span class="string">"."</span>):</span><br><span class="line">		obj = getattr(obj,name)</span><br><span class="line">	<span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p>这个函数可以用来排序同类型的对象，比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, user_id)</span>:</span></span><br><span class="line">        self.user_id = user_id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'User(&#123;&#125;)'</span>.format(self.user_id)</span><br><span class="line">users = [User(<span class="number">23</span>), User(<span class="number">3</span>), User(<span class="number">99</span>)]</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> attrgetter</span><br><span class="line"><span class="keyword">print</span> (sorted(users, key=attrgetter(<span class="string">'user_id'</span>)))</span><br></pre></td></tr></table></figure></p>
<p>等价于:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(sorted(users, key=<span class="keyword">lambda</span> u: u.user_id))</span><br></pre></td></tr></table></figure></p>
<p>函数<code>attrgetter()</code>运行速度通常要快一点，并且还允许多个字段同时比较。</p>
<p>2.<code>operator.itemgetter(*items)</code> :</p>
<blockquote>
<ul>
<li>After f = itemgetter(2), the call f(r) returns r[2].</li>
<li>After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3]).<br>等于:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">itemgetter</span><span class="params">(*items)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(items) == <span class="number">1</span>:</span><br><span class="line">        item = items[<span class="number">0</span>]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(obj)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> obj[item]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(obj)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> tuple(obj[item] <span class="keyword">for</span> item <span class="keyword">in</span> items)</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p>这个函数可以<code>通过某个关键字排序一个字典列表</code>,比如要排序:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [</span><br><span class="line">	&#123;<span class="string">'name'</span> : <span class="string">'xiaoming'</span> , <span class="string">'score'</span> : <span class="number">80</span>&#125;,</span><br><span class="line">	&#123;<span class="string">'name'</span> : <span class="string">'xianghong'</span> , <span class="string">'score'</span> : <span class="number">89</span>&#125;,</span><br><span class="line">	&#123;<span class="string">'name'</span> : <span class="string">'xiangzhang'</span> , <span class="string">'score'</span> : <span class="number">55</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>可以这样实现:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line">a_by_name = sorted(a, key=itemgetter(<span class="string">'name'</span>))</span><br><span class="line">a_by_score = sorted(a, key=itemgetter(<span class="string">'score'</span>))</span><br><span class="line">print(a_by_name)</span><br><span class="line">print(a_by_score)</span><br></pre></td></tr></table></figure></p>
<p>结果:[{‘name’: ‘xianghong’, ‘score’: 89}, {‘name’: ‘xiangzhang’, ‘score’: 55}, {‘name’: ‘xiaoming’, ‘score’: 80}]<br>[{‘name’: ‘xiangzhang’, ‘score’: 55}, {‘name’: ‘xiaoming’, ‘score’: 80}, {‘name’: ‘xianghong’, ‘score’: 89}]</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1.<code>operator.attrgetter(*attrs)</code>:从操作对象取出<code>attr</code>并返回一个可调用的对象。如果超过一个attr,返回一个attributes的元组。这个attribute的名字可以包含圆点。例子:</p>
]]>
    </summary>
    
      <category term="Python" scheme="http:lczpassion.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我所理解的人生的意义]]></title>
    <link href="http:lczpassion.com/2015/05/22/%E6%88%91%E6%89%80%E7%90%86%E8%A7%A3%E7%9A%84%E4%BA%BA%E7%94%9F%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>http:lczpassion.com/2015/05/22/我所理解的人生的意义/</id>
    <published>2015-05-22T04:36:17.000Z</published>
    <updated>2015-05-22T08:54:40.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>今天偶然在优酷上看到了宋鸿兵老师的纪录片<strong><em>鸿观</em></strong>的第３１期 : 读反心灵鸡汤 认清自己。这当然不可能是广告，我也不牛逼，宋老师也不需要.注 : 扯的只是个人的观点，如有反对意见可以留言。</p>
</blockquote>
<h2 id="目的">目的</h2><p>我为什么要写这篇博客？其实我早就想写点东西来认识我自己了，人是会不断思考的，思考的东西放在脑子里放多了就需要拿出来整理一下（脑容量小）。而今天看到的鸿观就是一个契机，虽然它开头的几句话有点扯淡，但内容还是不错的（笑）。</p>
<h3 id="自强与好强">自强与好强</h3><p>开头宋老师讲了两种人：<code>自强</code>与<code>好强</code>的人。就我个人观点来言，还是要去做一个<code>自强的人</code>,每个人不是为别人而活的，而是为自己活的，就像宋老师所说，每个<code>自强的人</code>都有强大的小宇宙，他们不会被外界所干扰,他们是和自己去比而不是和别人去比，<strong><em>与己斗多有意思!</em></strong></p>
<h3 id="这个社会功利化太重">这个社会功利化太重</h3><p>视频中宋老师说好强的人功利化太重，重不重我不知道，因为我不是一个好强心特别重的人（笑）。但是对于这个功利化，我还是有点想法的。现在国内功利化比较重，好多人想出人头地，这本身没有什么，能混的好为什么不混的好，但是许多人没有<code>底线</code>。视频中宋老师引用了司马光的话”德大于才的叫君子，才大于德的叫小人”。许多人只关心结果而不关心过程，只关心有没有钱，有没有权，对成功的定义就是有多少钱，有多少钱，有钱有权就牛逼，太片面了！５００年以后人们可能不会记住比尔盖茨有多少钱，能被记得的只能是他创建了一个伟大的企业，而金钱只是附属的东西。国内现在创业风这么热，猪能不能飞起来我不知道，我只是知道现在大多是的创业者是为了钱，而不是创建一个伟大的企业，所以它们永远成为不了谷歌，苹果，更不要说超过了。</p>
<h1 id="追寻本心">追寻本心</h1><p>说了这么多，好像是鸡汤（ｏ（╯□╰）ｏ）。<br>我所追寻的人生的意义：　做一个自强的人，不趋炎附势，追寻自己的本心，寻找自己真正喜欢的东西，并不断坚持下去。</p>
<h2 id="我们要过的是自己想要的生活，而不是别人眼中好的生活。">我们要过的是自己想要的生活，而不是别人眼中好的生活。</h2>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>今天偶然在优酷上看到了宋鸿兵老师的纪录片<strong><em>鸿观</em></strong>的第３１期 : 读反心灵鸡汤 认清自己。这当然不可能是广告，我也不牛逼，宋老师也不需要.注 : 扯的只是个人的观点，如有反对意见可以留言。</p>
</]]>
    </summary>
    
      <category term="杂谈" scheme="http:lczpassion.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python heapq-堆列算法]]></title>
    <link href="http:lczpassion.com/2015/05/21/heapq-%E5%A0%86%E5%88%97%E7%AE%97%E6%B3%95/"/>
    <id>http:lczpassion.com/2015/05/21/heapq-堆列算法/</id>
    <published>2015-05-21T12:35:41.000Z</published>
    <updated>2015-05-25T12:49:27.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>This module provides an implementation of the heap queue algorithm, also known as the priority queue algorithm.   —来自厚重的Python文档</p>
</blockquote>
<hr>
<p><code>Heap</code>是一种二叉树，它的每一个父节点的值都小于或等于它的子节点。用数组完成了这个实现，在这个二叉树中，<code>heap[k] &lt;= heap[2*k+1] , heap[k] &lt;= heap[2*k+2]</code> , 即树顶的数是最小的。</p>
<hr>
<h2 id="heapq_提供了以下几个函数:">heapq　提供了以下几个函数:</h2><blockquote>
<ul>
<li>heapq.heappush(heap,item) : 把 item 的值压入 heap</li>
<li>heaoq.heappop(heap) : 从 heao 中 pop 并返回最小的 item , 如果 heap 是空的，IndexError raised,想不用 popping 访问最小的 item , 用 heap[0]</li>
<li>heapq.heappushpop(heap,item) : 把 item 压入堆中，然后pop并返回最小的item</li>
<li>heapq.heaplfy(x) : 把 list x 转换成　heap</li>
<li>heapq.heapreplace(heap,item) : 从 heao 中 pop 并返回最小的 item , 并且压入新的 item </li>
<li>heapq.merge(*iterables) : 把多个有序输入转化成一个单一的输出。    </li>
<li>heapq.nlarget(n,iterable,key=None) : 返回一个有n个最大元素的 list ,如果提供了 key，那么每一个元素就会和 key 进行比较</li>
<li>heapq.nsmallest(n,iterable,key=None) : 同 nlarget 相反</li>
</ul>
</blockquote>
<hr>
<p>The latter two functions perform best for smaller values of n. For larger values, it is more efficient to use the <code>sorted()</code> function. Also, when <code>n==1</code>, it is more efficient to use the built-in <code>min()</code> and <code>max()</code> functions. If repeated usage of these functions is required, consider turning the iterable into an actual heap.</p>
<hr>
<h1 id="例子:">例子:</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapsort</span><span class="params">(iterable)</span>:</span></span><br><span class="line">	h = []</span><br><span class="line">	<span class="keyword">for</span> value <span class="keyword">in</span> iterable:</span><br><span class="line">		heapq.heappush(h,value)</span><br><span class="line">	<span class="keyword">print</span> ([heapq.heappop(h) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(h))])</span><br><span class="line"></span><br><span class="line">heapsort([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>result : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</p>
<hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line">h = []</span><br><span class="line">heapq.heappush(h,(<span class="number">1</span>,<span class="string">'write code'</span>))</span><br><span class="line">heapq.heappush(h,(<span class="number">5</span>,<span class="string">'write code'</span>))</span><br><span class="line">heapq.heappush(h,(<span class="number">2</span>,<span class="string">'write code'</span>))</span><br><span class="line"><span class="keyword">print</span> (heapq.heappop(h))</span><br></pre></td></tr></table></figure>
<p>result : (1, ‘write code’) </p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>This module provides an implementation of the heap queue algorithm, also known as the priority queue algorithm.   —来自厚重的Pyth]]>
    </summary>
    
      <category term="Python" scheme="http:lczpassion.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python Collections模块]]></title>
    <link href="http:lczpassion.com/2015/05/21/collections%E6%A8%A1%E5%9D%97/"/>
    <id>http:lczpassion.com/2015/05/21/collections模块/</id>
    <published>2015-05-21T10:34:13.000Z</published>
    <updated>2015-05-28T12:07:42.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>官方文档对collections的描述为:This module implements specialized container datatypes providing alternatives to Python’s general purpose built-in containers, dict, list, set, and tuple.</p>
</blockquote>
<hr>
<h2 id="1-deque_objects">1.<code>deque</code> objects</h2><p>用法: <code>class collections.deque([iterable][,maxlen])</code> ,如果<strong><em>maxlen</em></strong>不是具体的或者是<strong><em>None</em></strong>,<code>deque</code>将没有界限，<code>deque</code>不会超过<strong><em>maxlen</em></strong>这个最大值。当<code>deque</code>满了，一旦有新的元素加进来的时候，就会有相应的元素被丢弃。</p>
<hr>
<h2 id="Deque_对象支持以下方法：">Deque 对象支持以下方法：</h2><blockquote>
<ul>
<li>append(x) : 把 x 加到 deque 的右侧</li>
<li>appendleft(x) : 把 x 加到 deque 的左侧</li>
<li>clear() : 删除所有元素</li>
<li>count(x) : 计算 deque 元素的数量(这是在3.2后新加进来的)</li>
<li>extend(iterable) : 在 deque 的右边加上可迭代的元素</li>
<li>extendleft(iterable) : 在 deque 的左边加上可迭代的元素，注意:加上的结果是相反于可迭代的内容</li>
<li>pop() : 从 deque 的右边删除并返回一个元素，如果现在没有元素，raise an IndexError</li>
<li>popleft() : 从 deque 的左边删除并返回一个元素，如果现在没有元素，raise an IndexError</li>
<li>remove(value) : 删除第一次出现的value，如果没有找到，raise ValueError</li>
<li>reverse() : 颠倒 deque 中的元素并返回None(这是在3.2后新加进来的)</li>
<li>rotate(n) : 从 n 到最右边循环这个 deque，如果 n 是负数，向左循环，向右旋转一步等于d.appendleft(d.pop())</li>
<li>Deque　对象还提供了一个只读的属性 : maxlen </li>
</ul>
</blockquote>
<hr>
<h2 id="你可能会说：没什么特别的啊？">你可能会说：没什么特别的啊？</h2><p>像<code>insert(0,v)</code> , <code>pop(0)</code> 对应着　<code>appendleft()</code> , <code>popleft()</code> ,看起来没什么区别，但实际上还是有区别的。尽管<code>list</code>支持简单的操作，但是它的时间复杂度是<strong><em>O(n)</em></strong>,随　n　的增加而增加，而<code>deque</code>则是<strong><em>O(1)</em></strong>,所以当项目有时间需求时，还是要用<code>deque</code>的。</p>
<hr>
<h2 id="2-defaultdict_objects">2.<code>defaultdict</code> objects</h2><p>用法: <code>class collections.defaultdict([default_factory[, ...]])</code> 。第一个参数为<code>default_factory</code>　提供了初始值，它的默认值为<code>None</code>,而<code>dict</code>中不存在默认值说法。除了基础的<code>dict</code>操作外，<code>defaultdict</code>对象还支持以下方法:</p>
<h3 id="missing(key)"><strong>missing</strong>(key)</h3><p>如果<code>default_factory</code>属性是<code>None</code>,raise <code>KeyError</code>并把<code>key</code>作为属性。如果不是<code>None</code>,给`key｀提供一个默认的值，插入在字典中并返回它。</p>
<hr>
<h2 id="例子">例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">s = [(<span class="string">'yellow'</span>, <span class="number">1</span>), (<span class="string">'blue'</span>, <span class="number">2</span>), (<span class="string">'yellow'</span>, <span class="number">3</span>), (<span class="string">'blue'</span>, <span class="number">4</span>), (<span class="string">'red'</span>, <span class="number">1</span>)]</span><br><span class="line">d = defaultdict(list)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> s:</span><br><span class="line">	d[k].append(v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (list(d.items()))</span><br></pre></td></tr></table></figure>
<p>reasult : [(‘yellow’, [1, 3]), (‘blue’, [2, 4]), (‘red’, [1])]</p>
<hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">s = <span class="string">'mississippi'</span></span><br><span class="line">d = defaultdict(int)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">	d[k] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (list(d.items()))</span><br></pre></td></tr></table></figure>
<p>result : [(‘p’, 2), (‘s’, 4), (‘i’, 4), (‘m’, 1)]</p>
<h2 id="3-collections-namedtuple(typename,_field_names,_verbose=False,_rename=False)">3.collections.namedtuple(typename, field_names, verbose=False, rename=False)</h2><p>namedtuple()函数可以作为元组被使用，而且有通过添加名称，而不是位置索引来访问元素的能力。<br>用法:返回一个新的元组子类命名为<code>tyoename</code>。如果<code>rename</code>是True,无效的fieldnames将会被替换成位置名。比如<code>&#39;abc&#39;, &#39;def&#39;, &#39;ghi&#39;, &#39;abc&#39;]</code>将会被替换成<code>[&#39;abc&#39;, &#39;_1&#39;, &#39;ghi&#39;, &#39;_3&#39;]</code>。如果<code>verbose</code>是True,the class definition is printed after it is built. This option is outdated; instead, it is simpler to print the _source attribute.<br>例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Point = namedtuple(<span class="string">'Point'</span>,[<span class="string">'x'</span>,<span class="string">'y'</span>])</span><br><span class="line">p = Point(<span class="number">11</span>,<span class="number">22</span>)</span><br><span class="line"><span class="keyword">print</span> (p[<span class="number">0</span>]+p[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p>
<p>result: 33</p>
<p>如果你想通过使用名称来访问元素，可以用这个函数，比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Person = namedtuple(<span class="string">'Person'</span>, [<span class="string">'name'</span>, <span class="string">'weight'</span>])</span><br><span class="line">sub = Person(<span class="string">'xiaoming'</span>, <span class="string">'75kg'</span>)</span><br><span class="line"><span class="keyword">print</span> (sub.name)</span><br><span class="line">print(sub.weight)</span><br></pre></td></tr></table></figure></p>
<p>result : xiaoming<br>75kg</p>
<h2 id="4-ChainMap_objects">4.ChainMap objects</h2><p>New in version 3.3.<br><code>class collections.ChainMap(*maps)</code>:支持所有普通的字典方法。</p>
<blockquote>
<ul>
<li>maps : 一个用户可以更新的映射表。这个表至少包含一个映射。</li>
<li>new_child(m=None) : 返回一个新的<code>ChainMap</code>,如果指定了m,那么m在列表的最前面。</li>
<li>parents : 返回一个新的<code>ChainMap</code>包含除了第一个map外的所有maps。</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'z'</span>: <span class="number">3</span> &#125;</span><br><span class="line">b = &#123;<span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">4</span> &#125;</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br><span class="line">c = ChainMap(a,b)</span><br><span class="line"><span class="keyword">print</span> (c[<span class="string">'x'</span>])</span><br><span class="line">print(c[<span class="string">'y'</span>]) </span><br><span class="line">print(c[<span class="string">'z'</span>])</span><br><span class="line">print(c[<span class="string">'z'</span>])</span><br></pre></td></tr></table></figure>
<p>result : 1,2,3,3, 可以看到如果先从a找到，就不再从b中找。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">values = ChainMap()</span><br><span class="line">values[<span class="string">'x'</span>] = <span class="number">1</span></span><br><span class="line">values = values.new_child()</span><br><span class="line">values[<span class="string">'x'</span>] = <span class="number">2</span></span><br><span class="line">values = values.new_child()</span><br><span class="line">values[<span class="string">'x'</span>] = <span class="number">3</span></span><br><span class="line"><span class="keyword">print</span> (values)</span><br></pre></td></tr></table></figure></p>
<p>result : ChainMap({‘x’: 3}, {‘x’: 2}, {‘x’: 1})<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (values[<span class="string">'x'</span>])</span><br><span class="line">values = values.parents</span><br><span class="line"><span class="keyword">print</span> (values[<span class="string">'x'</span>])</span><br></pre></td></tr></table></figure></p>
<p>result : 3, 2</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>官方文档对collections的描述为:This module implements specialized container datatypes providing alternatives to Python’s general purpo]]>
    </summary>
    
      <category term="Python" scheme="http:lczpassion.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python 格式化输出]]></title>
    <link href="http:lczpassion.com/2015/05/19/%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/"/>
    <id>http:lczpassion.com/2015/05/19/格式化输出/</id>
    <published>2015-05-19T11:02:12.000Z</published>
    <updated>2015-05-25T12:49:43.000Z</updated>
    <content type="html"><![CDATA[<hr>
<blockquote>
<p>今天做了<code>Python</code>的一个小练习，发现<code>str.format()</code>方法用的不熟，现在来整理一下。注：运行环境是Python 3.4.1</p>
</blockquote>
<hr>
<p>官方文档中是这样说的 <strong><em>The built-in string class provides the ability to do complex variable substitutions and value formatting via the format() method</em></strong>(这个内置的string类通过format()方法提供了去做复杂的变量替换和值格式化的能力）。那么如何把值转化成字符串？<code>Python</code>提供了<code>str()</code>和<code>repr()</code>函数。函数<code>str()</code>把值转换成易于人阅读的形式，函数<code>repr()</code>转换成解释器阅读的模式。</p>
<hr>
<p>文档中的一个例子:平方和立方表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    print(repr(x).rjust(<span class="number">2</span>), repr(x*x).rjust(<span class="number">3</span>), end=<span class="string">' '</span>)</span><br><span class="line">    print(repr(x*x*x).rjust(<span class="number">4</span>))</span><br></pre></td></tr></table></figure></p>
<p>官方文档说<code>str.rjust()</code>把字符串输出到一列，并通过向左侧填充空格来使其右对齐(<strong><em>但我自己运行并不右对齐</em></strong>)。类似的方法还有<code>str.ljust()</code>和<code>str.center()</code>。<br>输出结果如下：</p>
<hr>
<p> 1   1    1<br> 2   4    8<br> 3   9   27<br> 4  16   64<br> 5  25  125<br> 6  36  216<br> 7  49  343<br> 8  64  512<br> 9  81  729<br>10 100 1000</p>
<hr>
<p>还有一种方法就是<code>str.format()</code>用法了:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    print(<span class="string">'&#123;0:2d&#125; &#123;1:3d&#125; &#123;2:4d&#125;'</span>.format(x,x*x,x*x*x))</span><br></pre></td></tr></table></figure></p>
<h2 id="这个方法看起来是不是简洁许多？">这个方法看起来是不是简洁许多？</h2><p><code>str.format()</code>基本用法:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> ((<span class="string">'Hello &#123;&#125; , &#123;&#125;'</span>).format(<span class="string">'World'</span>, <span class="string">'HaHa'</span>))</span><br></pre></td></tr></table></figure></p>
<p>result:Hello World , HaHa</p>
<hr>
<p>大括号和其中的字符会被替换成<code>str.format()</code>的参数。大括号中的数值指明使用传入<code>str.format()</code>中的数值是哪一个，如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'&#123;0&#125; &#123;1&#125;'</span>.format(<span class="string">'a'</span>,<span class="string">'b'</span>))</span><br></pre></td></tr></table></figure></p>
<p>result:a b<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'&#123;0&#125; &#123;1&#125;'</span>.format(<span class="string">'b'</span>,<span class="string">'a'</span>))</span><br></pre></td></tr></table></figure></p>
<p>result:b a</p>
<hr>
<p>如果在<code>str.format()</code>调用时使用关键字参数，可以通过参数名引用，如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Hello &#123;a&#125;, &#123;b&#125;'</span>.format(</span><br><span class="line">	b = <span class="string">'HaHa'</span>,a = <span class="string">'World'</span>))</span><br></pre></td></tr></table></figure></p>
<p>result:Hello World, HaHa</p>
<hr>
<p>字段名后可用<code>:</code>和格式指令如：将Pi转为２位精度：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">print(<span class="string">'&#123;0: .2f&#125;'</span>.format(math.pi))</span><br></pre></td></tr></table></figure></p>
<p>result:3.14</p>
<hr>
<p>在字段后的<code>:</code>的后面加一个整数会限定该字段的最小宽度，前面的平方和立方表就用到了这个用法。</p>
<hr>
<h1 id="旧的格式化操作符%">旧的格式化操作符<code>%</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">print( <span class="string">'%3.2f'</span> %math.pi)</span><br></pre></td></tr></table></figure>
<p>result:3.14</p>
<hr>
<h1 id="几个栗子:">几个栗子:</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print( <span class="string">'&#123;0&#125;&#123;1&#125;&#123;0&#125;'</span>.format(<span class="string">'abra'</span>, <span class="string">'cad'</span>) )</span><br></pre></td></tr></table></figure>
<p>result:abracadabra(参数指数可重复)</p>
<hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print( <span class="string">'&#123;:&lt;30&#125;'</span>.format(<span class="string">'left aligned'</span>) ) </span><br><span class="line"><span class="comment">#'left aligned                  '</span></span><br><span class="line">print(<span class="string">'&#123;:&gt;30&#125;'</span>.format(<span class="string">'right aligned'</span>) )</span><br><span class="line"><span class="comment">#'                 right aligned'</span></span><br><span class="line">print(<span class="string">'&#123;:^30&#125;'</span>.format(<span class="string">'centered'</span>) )</span><br><span class="line"><span class="comment">#'           centered           '</span></span><br><span class="line">print(<span class="string">'&#123;:*^30&#125;'</span>.format(<span class="string">'centered'</span>) )</span><br><span class="line"><span class="comment">#'***********centered***********'</span></span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'&#123;:,&#125;'</span>.format(<span class="number">1234567890</span>) )</span><br></pre></td></tr></table></figure>
<p>result: 1,234,567,890(使用逗号作为千位分隔符)</p>
<hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">d = datetime.datetime(<span class="number">2015</span>,<span class="number">5</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">57</span>,<span class="number">30</span>)</span><br><span class="line">print(<span class="string">'&#123;:%Y-%m-%d %H:%M:%S&#125;'</span>.format(d))</span><br></pre></td></tr></table></figure>
<p>result: 2015-05-19 20:57:30</p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<blockquote>
<p>今天做了<code>Python</code>的一个小练习，发现<code>str.format()</code>方法用的不熟，现在来整理一下。注：运行环境是Python 3.4.1</p>
</blockquote>
<hr>
<p>官]]>
    </summary>
    
      <category term="Python" scheme="http:lczpassion.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的一亩三分地]]></title>
    <link href="http:lczpassion.com/2015/05/16/%E6%88%91%E7%9A%84%E4%B8%80%E4%BA%A9%E4%B8%89%E5%88%86%E5%9C%B0/"/>
    <id>http:lczpassion.com/2015/05/16/我的一亩三分地/</id>
    <published>2015-05-16T10:03:31.000Z</published>
    <updated>2015-05-17T11:29:30.000Z</updated>
    <content type="html"><![CDATA[<hr>
<blockquote>
<p>终于搭建好了我的第一个博客,虽然过程是痛苦的但结局还是好的O(∩_∩)O哈！</p>
</blockquote>
<hr>
<h1 id="1-_过程">1. 过程</h1><p>我先讲一下我搭blog痛苦的过程吧.首先选择一个框架(毕竟不懂前端,没法自己写o(╯□╰)o),<a href="http://hexo.io/zh-cn/" target="_blank" rel="external"><strong><em>hexo</em></strong></a> 顺势映入眼帘,然后就搜到了<a href="http://cnfeat.com/2014/05/10/2014-05-11-how-to-build-a-blog/" target="_blank" rel="external"><strong><em>如何搭建一个独立博客——简明Github Pages与Hexo教程</em></strong></a>,按照这个教程,我在<strong><em>godaddy</em></strong>上购买了域名并搭建在我的<strong><em>github</em></strong>上,到这里还是比较顺的,当然作为一个英语渣在godaddy上买域名还是不容易的(哭),<code>重头戏来了</code>,在模板上面我先后用了<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external"><strong><em>yilia</em></strong></a>,<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external"><strong><em>next</em></strong></a>,<a href="https://github.com/hexojs/hexo-theme-light" target="_blank" rel="external"><strong><em>light</em></strong></a>以及各种它们的子模板……没错,你没看错,我的模版最后还是选择了yilia,为什么呢?因为作为我的第一个blog,我还是希望它能完美一些,就想往上面加一些功能,但是不会前端啊,尼玛啊,现在又不想去学(活该).就去网上找教程,但yilia不容易改,出现各种问题,别的模板改完自己也不喜欢,就这样浪费了不少时间(哭),最终还是选择了Litten大神的yillia，在这里谢谢大神O(∩_∩)O。</p>
<hr>
<h1 id="2-_目的">2. 目的</h1><p>建这个blog的主要目的还是为了<code>学习</code>（不要打脸！,啪啪，叫你装！）。我平常学习以自学为主，所以有些东西可能学的不够扎实，我希望在<strong><em>blog</em></strong>上定期写写总结来巩固一下，当然也可能扯扯淡，自己的blog就是自己的一亩三分地，自己想些什么就写什么，比较自由。还有两年就要毕业了，也希望到时候再回过头来能发现自己的<code>成长</code>。</p>
<hr>
<p><img src="http://i2.17173.itc.cn/2013/news/2013/09/06/gk0906hayao05.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<blockquote>
<p>终于搭建好了我的第一个博客,虽然过程是痛苦的但结局还是好的O(∩_∩)O哈！</p>
</blockquote>
<hr>
<h1 id="1-_过程">1. 过程</h1><p>我先讲一下我搭blog痛苦的过程吧.首先选择一个框架(毕竟]]>
    </summary>
    
      <category term="杂谈" scheme="http:lczpassion.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>